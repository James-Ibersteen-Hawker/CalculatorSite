for (let q = 0; q < objs.length; q++) {
    let config = {
      attributes: true,
    };
    let observer = new MutationObserver(() => {
      console.log("started");
      let i;
      let classItem;
      objs[q].e.classList.forEach((elem) => {
        if (elem.includes("set")) classItem = elem;
      });
      for (let k = 0; k < classItem.length; k++) {
        if (!isNaN(Number(classItem[k]))) i = Number(classItem[k]);
      }
      let elem = get(`.${classItem}`);
      for (let r = 0; r < objs.length; r++) {
        if (objs[r].e == elem) {
          elem = objs[r];
          break;
        }
      }
      console.log(elem);
      if (get(`#_${elem.e.tagName}${i}`)) {
        get(`#_${elem.e.tagName}${i}`).remove();
      }
      let style = document.createElement("style");
      style.id = `_${elem.e.tagName}${i}`;
      let CSSclass = `.${elem.e.tagName}${i}_click {
          background: ${(() => {
            let d = 50;
            let styles = window.getComputedStyle(elem.e);
            let bg = styles.getPropertyValue("background");
            if (
              bg != "auto" &&
              !bg.includes("url") &&
              !bg.includes("gradient")
            ) {
              bg = bg.toString().split(")")[0];
              bg = bg.split("");
              let stylTemp = [];
              for (let q = 0; q < bg.length; q++) {
                if (
                  (isNaN(Number(bg[q])) != true && bg[q] != " ") ||
                  bg[q] == ","
                )
                  stylTemp.push(bg[q]);
              }
              stylTemp = stylTemp.join("").split(",");
              let r = stylTemp[0];
              let g = stylTemp[1];
              let b = stylTemp[2];
              let a = 1;
              let compile;
              if (stylTemp.length == 3) {
                stylTemp[0] - d < 0 ? (r = 0) : (r = stylTemp[0] - d);
                stylTemp[1] - d < 0 ? (b = 0) : (g = stylTemp[1] - d);
                stylTemp[2] - d < 0 ? (g = 0) : (b = stylTemp[2] - d);
                compile = `rgb(${r},${g},${b})`;
                console.log("styltemp", compile);
                return compile;
              } else if (stylTemp.length == 4) {
                stylTemp[0] - d < 0 ? (r = 0) : (r = stylTemp[0] - d);
                stylTemp[1] - d < 0 ? (b = 0) : (g = stylTemp[1] - d);
                stylTemp[2] - d < 0 ? (g = 0) : (b = stylTemp[2] - d);
                a = stylTemp[3];
                compile = `rgba(${r},${g},${b}, ${a})`;
                console.log(compile);
              }
            }
          })()};
          }
        `;
      console.log(CSSclass);
      style.append(CSSclass);
      document.head.append(style);
      console.log(
        elem.e.classList,
        window.getComputedStyle(elem.e).getPropertyValue("background")
      );
    });
    observer.observe(objs[q].e, config);
  }